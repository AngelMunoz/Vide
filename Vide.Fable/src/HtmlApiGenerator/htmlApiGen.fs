module HtmlApiGenerator

open FSharp.Text.TypedTemplateProvider
open W3schoolScrape

let [<Literal>] HtmlApiTemplate = """
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide

open System.Runtime.CompilerServices
open Browser.Types
open Vide
open Vide.HtmlApiPreparation

module HtmlElementBuilders =
    type HtmlGARenderValC0Builder<'v,'n when 'n :> HTMLElement>(tagName, resultSelector) =
        inherit RenderValC0Builder<'v,'n>(BuilderBricks.createNode tagName, BuilderBricks.checkOrUpdateNode tagName, resultSelector)

    type HtmlGARenderRetC0Builder<'n when 'n :> HTMLElement>(tagName) =
        inherit RenderRetC0Builder<'n>(BuilderBricks.createNode tagName, BuilderBricks.checkOrUpdateNode tagName)

    type HtmlGARenderValCnBuilder<'v,'n when 'n :> HTMLElement>(tagName, resultSelector) =
        inherit RenderValCnBuilder<'v,'n>(BuilderBricks.createNode tagName, BuilderBricks.checkOrUpdateNode tagName, resultSelector)

    type HtmlGARenderRetCnBuilder<'n when 'n :> HTMLElement>(tagName) =
        inherit RenderRetCnBuilder<'n>(BuilderBricks.createNode tagName, BuilderBricks.checkOrUpdateNode tagName)

    {{for builder in builders}}{{builder.definition}}{{end}}

open HtmlElementBuilders

{{for ext in builderExtensions}}
[<Extension>]
type {{ext.builderName}}Extensions =
    class
        // Attributes
        {{for attr in ext.attributes}}
{{attr.xmlDoc}}
        [<Extension>]
        static member {{attr.memberName}}(this: {{ext.builderParamTypeAnnotation}}, value: {{attr.typ}}) =
            this.OnEval(fun x -> x.node.setAttribute("{{attr.name}}", value{{attr.toString}}))
        {{end}}

        // Events
        {{for evt in ext.events}}
{{evt.xmlDoc}}
        [<Extension>]
        static member {{evt.memberName}}(this: {{ext.builderParamTypeAnnotation}}, handler) =
            this.OnEval(fun x -> x.node.{{evt.name}} <- Event.handle x.node x.context handler)

{{evt.xmlDoc}}
        [<Extension>]
        static member {{evt.memberName}}(this: {{ext.builderParamTypeAnnotation}}, ?requestEvaluation: bool) =
            this.OnEval(fun x -> x.node.{{evt.name}} <- Event.handle x.node x.context (fun args ->
                args.requestEvaluation <- defaultArg requestEvaluation true))
        {{end}}
    end
{{end}}

type Html =
    {{for builder in builders}}
{{builder.xmlDoc}}
    static member inline {{builder.name}} = HtmlElementBuilders.{{builder.name}}(){{builder.pipedConfig}}
    {{end}}
"""

type Api = Template<HtmlApiTemplate>


let generate (elements: Element list) (globalAttrs: Attr list) (globalEvents: Evt list) =
    let makeCodeDoc (desc: string) indent =
        desc.Split('\n')
        |> Array.map (fun s ->
            let indent = String.replicate indent "    "
            $"{indent}/// {s}")
        |> String.concat "\n"

    let builders =
        [ for elem in elements do
            let builderDefinition =
                let valueTypeName = $"{elem.tagName}Value"
                match elem.returnsValue, elem.elementType with
                | true,Void ->
                    $"""
    type {elem.fsharpName}() =
        inherit HtmlGARenderValC0Builder<{valueTypeName}, {elem.domInterfaceName}>
            (
                "{elem.tagName}",
                fun node -> {valueTypeName}(node)
            )
                    """

                | false,Void ->
                    $"""
    type {elem.fsharpName}() =
        inherit HtmlGARenderRetC0Builder<{elem.domInterfaceName}>("{elem.tagName}")
                    """
                
                | true,Content ->
                    $"""
    type {elem.fsharpName}() =
        inherit HtmlGARenderValC0Builder<{valueTypeName}, {elem.domInterfaceName}>
            (
                "{elem.tagName}",
                fun node -> {valueTypeName}(node)
            )
                    """


                | false,Content ->

                    $"""
    type {elem.fsharpName}() =
        inherit HtmlGARenderRetCnBuilder<{elem.domInterfaceName}>("{elem.tagName}")
                    """

            let pipedConfig = if elem.returnsValue then ".oninput()" else ""

            Api.builder(
                builderDefinition,
                elem.fsharpName,
                pipedConfig,
                makeCodeDoc elem.desc 1
            )
        ]
    
    let builderExtensions =
        let makeAttrs (attrs: Attr list) =
            [ for attr in attrs do
                let typ,toString = "string", ""
                    // TODO
                    //match attr.types with
                    //| AttrTyp.Text -> "string", ""
                    //| AttrTyp.Boolean -> "bool", ".ToString()"
                    //| AttrTyp.Enum labels -> "string", ""
                Api.attr(
                    attr.fsharpName, 
                    attr.name, 
                    toString, 
                    typ,
                    makeCodeDoc attr.desc 2
                )
            ]
        let makeEvts (evts: Evt list) =
            [ for evt in evts do
                Api.evt(evt.name, evt.name, makeCodeDoc evt.desc 2)
            ]

        [
            Api.ext(
                makeAttrs globalAttrs,
                "HtmlGARenderValC0Builder",
                "#HtmlGARenderValC0Builder<_,_>",
                makeEvts globalEvents
            )
            Api.ext(
                makeAttrs globalAttrs,
                "HtmlGARenderRetC0Builder",
                "#HtmlGARenderRetC0Builder<_>",
                makeEvts globalEvents
            )
            Api.ext(
                makeAttrs globalAttrs,
                "HtmlGARenderValCnBuilder",
                "#HtmlGARenderValCnBuilder<_,_>",
                makeEvts globalEvents
            )
            Api.ext(
                makeAttrs globalAttrs,
                "HtmlGARenderRetCnBuilder",
                "#HtmlGARenderRetCnBuilder<_>",
                makeEvts globalEvents
            )

            for elem in elements do
                Api.ext(
                    makeAttrs elem.attrs, 
                    elem.fsharpName, 
                    $"#{elem.fsharpName}", 
                    []
                )
        ]

    let root = Api.Root(builderExtensions, builders)

    Api.Render(root)
