
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto generated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Vide

open Browser.Types
open Vide

module HtmlElementBuilders =
    
    type html() =
        inherit HTMLElementBuilder<HTMLHtmlElement>("html")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.manifest(value: System.String) = this.AddModifier(fun x -> x.setAttribute("manifest", value))
        member this.version(value: System.String) = this.AddModifier(fun x -> x.setAttribute("version", value))
        member this.xmlns(value: System.String) = this.AddModifier(fun x -> x.setAttribute("xmlns", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type head() =
        inherit HTMLElementBuilder<HTMLHeadElement>("head")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.profile(value: System.String) = this.AddModifier(fun x -> x.setAttribute("profile", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type link() =
        inherit HTMLElementBuilder<HTMLLinkElement>("link")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.as'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("as", value))
        member this.crossorigin(value: string) = this.AddModifier(fun x -> x.setAttribute("crossorigin", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.fetchpriority(value: string) = this.AddModifier(fun x -> x.setAttribute("fetchpriority", value))
        member this.href(value: System.String) = this.AddModifier(fun x -> x.setAttribute("href", value))
        member this.hreflang(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hreflang", value))
        member this.imagesizes(value: System.String) = this.AddModifier(fun x -> x.setAttribute("imagesizes", value))
        member this.imagesrcset(value: System.String) = this.AddModifier(fun x -> x.setAttribute("imagesrcset", value))
        member this.integrity(value: System.String) = this.AddModifier(fun x -> x.setAttribute("integrity", value))
        member this.media(value: System.String) = this.AddModifier(fun x -> x.setAttribute("media", value))
        member this.prefetch(value: System.String) = this.AddModifier(fun x -> x.setAttribute("prefetch", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.rel(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rel", value))
        member this.sizes(value: string) = this.AddModifier(fun x -> x.setAttribute("sizes", value))
        member this.title(value: System.String) = this.AddModifier(fun x -> x.setAttribute("title", value))
        member this.type'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.blocking(value: string) = this.AddModifier(fun x -> x.setAttribute("blocking", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type meta() =
        inherit HTMLElementBuilder<HTMLMetaElement>("meta")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.charset(value: System.String) = this.AddModifier(fun x -> x.setAttribute("charset", value))
        member this.content(value: System.String) = this.AddModifier(fun x -> x.setAttribute("content", value))
        member this.httpEquiv(value: string) = this.AddModifier(fun x -> x.setAttribute("http-equiv", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type style() =
        inherit HTMLElementBuilder<HTMLStyleElement>("style")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.media(value: System.String) = this.AddModifier(fun x -> x.setAttribute("media", value))
        member this.nonce(value: System.String) = this.AddModifier(fun x -> x.setAttribute("nonce", value))
        member this.title(value: System.String) = this.AddModifier(fun x -> x.setAttribute("title", value))
        member this.blocking(value: string) = this.AddModifier(fun x -> x.setAttribute("blocking", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type title() =
        inherit HTMLElementBuilder<HTMLTitleElement>("title")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type body() =
        inherit HTMLElementBuilder<HTMLBodyElement>("body")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.alink(value: System.String) = this.AddModifier(fun x -> x.setAttribute("alink", value))
        member this.background(value: System.String) = this.AddModifier(fun x -> x.setAttribute("background", value))
        member this.bgcolor(value: System.String) = this.AddModifier(fun x -> x.setAttribute("bgcolor", value))
        member this.bottommargin(value: System.String) = this.AddModifier(fun x -> x.setAttribute("bottommargin", value))
        member this.leftmargin(value: System.String) = this.AddModifier(fun x -> x.setAttribute("leftmargin", value))
        member this.link(value: System.String) = this.AddModifier(fun x -> x.setAttribute("link", value))
        member this.onafterprint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onafterprint", value))
        member this.onbeforeprint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onbeforeprint", value))
        member this.onbeforeunload(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onbeforeunload", value))
        member this.onblur(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onblur", value))
        member this.onerror(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onerror", value))
        member this.onfocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onfocus", value))
        member this.onhashchange(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onhashchange", value))
        member this.onlanguagechange(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onlanguagechange", value))
        member this.onload(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onload", value))
        member this.onmessage(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onmessage", value))
        member this.onoffline(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onoffline", value))
        member this.ononline(value: System.String) = this.AddModifier(fun x -> x.setAttribute("ononline", value))
        member this.onpopstate(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onpopstate", value))
        member this.onredo(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onredo", value))
        member this.onresize(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onresize", value))
        member this.onstorage(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onstorage", value))
        member this.onundo(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onundo", value))
        member this.onunload(value: System.String) = this.AddModifier(fun x -> x.setAttribute("onunload", value))
        member this.rightmargin(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rightmargin", value))
        member this.text(value: System.String) = this.AddModifier(fun x -> x.setAttribute("text", value))
        member this.topmargin(value: System.String) = this.AddModifier(fun x -> x.setAttribute("topmargin", value))
        member this.vlink(value: System.String) = this.AddModifier(fun x -> x.setAttribute("vlink", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type address() =
        inherit HTMLElementBuilder<HTMLElement>("address")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type article() =
        inherit HTMLElementBuilder<HTMLElement>("article")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type aside() =
        inherit HTMLElementBuilder<HTMLElement>("aside")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type footer() =
        inherit HTMLElementBuilder<HTMLElement>("footer")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type header() =
        inherit HTMLElementBuilder<HTMLElement>("header")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h1() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h1")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h2() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h2")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h3() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h3")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h4() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h4")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h5() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h5")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type h6() =
        inherit HTMLElementBuilder<HTMLHeadingElement>("h6")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type main() =
        inherit HTMLElementBuilder<HTMLElement>("main")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type nav() =
        inherit HTMLElementBuilder<HTMLElement>("nav")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type section() =
        inherit HTMLElementBuilder<HTMLElement>("section")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type blockquote() =
        inherit HTMLElementBuilder<HTMLQuoteElement>("blockquote")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.cite(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cite", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type dd() =
        inherit HTMLElementBuilder<HTMLElement>("dd")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.nowrap(value: System.String) = this.AddModifier(fun x -> x.setAttribute("nowrap", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type div() =
        inherit HTMLElementBuilder<HTMLDivElement>("div")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type dl() =
        inherit HTMLElementBuilder<HTMLDListElement>("dl")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type dt() =
        inherit HTMLElementBuilder<HTMLElement>("dt")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type figcaption() =
        inherit HTMLElementBuilder<HTMLElement>("figcaption")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type figure() =
        inherit HTMLElementBuilder<HTMLElement>("figure")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type hr() =
        inherit HTMLElementBuilder<HTMLHRElement>("hr")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.align(value: System.String) = this.AddModifier(fun x -> x.setAttribute("align", value))
        member this.color(value: System.String) = this.AddModifier(fun x -> x.setAttribute("color", value))
        member this.noshade(value: System.String) = this.AddModifier(fun x -> x.setAttribute("noshade", value))
        member this.size(value: System.String) = this.AddModifier(fun x -> x.setAttribute("size", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type li() =
        inherit HTMLElementBuilder<HTMLLIElement>("li")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.value(value: System.String) = this.AddModifier(fun x -> x.setAttribute("value", value))
        member this.type'(value: string) = this.AddModifier(fun x -> x.setAttribute("type", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type menu() =
        inherit HTMLElementBuilder<HTMLMenuElement>("menu")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type ol() =
        inherit HTMLElementBuilder<HTMLOListElement>("ol")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.reversed(value: System.String) = this.AddModifier(fun x -> x.setAttribute("reversed", value))
        member this.start(value: System.String) = this.AddModifier(fun x -> x.setAttribute("start", value))
        member this.type'(value: string) = this.AddModifier(fun x -> x.setAttribute("type", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type p() =
        inherit HTMLElementBuilder<HTMLParagraphElement>("p")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type pre() =
        inherit HTMLElementBuilder<HTMLPreElement>("pre")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.cols(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cols", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        member this.wrap(value: System.String) = this.AddModifier(fun x -> x.setAttribute("wrap", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type ul() =
        inherit HTMLElementBuilder<HTMLUListElement>("ul")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.compact(value: System.String) = this.AddModifier(fun x -> x.setAttribute("compact", value))
        member this.type'(value: string) = this.AddModifier(fun x -> x.setAttribute("type", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type a() =
        inherit HTMLElementBuilder<HTMLAnchorElement>("a")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.download(value: string) = this.AddModifier(fun x -> x.setAttribute("download", value))
        member this.href(value: string) = this.AddModifier(fun x -> x.setAttribute("href", value))
        member this.hreflang(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hreflang", value))
        member this.ping(value: System.String) = this.AddModifier(fun x -> x.setAttribute("ping", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.rel(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rel", value))
        member this.target(value: string) = this.AddModifier(fun x -> x.setAttribute("target", value))
        member this.type'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("type", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type abbr() =
        inherit HTMLElementBuilder<HTMLElement>("abbr")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type b() =
        inherit HTMLElementBuilder<HTMLElement>("b")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type bdi() =
        inherit HTMLElementBuilder<HTMLElement>("bdi")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type bdo() =
        inherit HTMLElementBuilder<HTMLElement>("bdo")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type br() =
        inherit HTMLElementBuilder<HTMLBRElement>("br")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type cite() =
        inherit HTMLElementBuilder<HTMLElement>("cite")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type code() =
        inherit HTMLElementBuilder<HTMLElement>("code")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type dfn() =
        inherit HTMLElementBuilder<HTMLElement>("dfn")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type em() =
        inherit HTMLElementBuilder<HTMLElement>("em")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type i() =
        inherit HTMLElementBuilder<HTMLElement>("i")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type kbd() =
        inherit HTMLElementBuilder<HTMLElement>("kbd")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type mark() =
        inherit HTMLElementBuilder<HTMLElement>("mark")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type q() =
        inherit HTMLElementBuilder<HTMLQuoteElement>("q")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.cite(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cite", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type rp() =
        inherit HTMLElementBuilder<HTMLElement>("rp")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type rt() =
        inherit HTMLElementBuilder<HTMLElement>("rt")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type ruby() =
        inherit HTMLElementBuilder<HTMLElement>("ruby")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type s() =
        inherit HTMLElementBuilder<HTMLElement>("s")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type samp() =
        inherit HTMLElementBuilder<HTMLElement>("samp")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type small() =
        inherit HTMLElementBuilder<HTMLElement>("small")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type span() =
        inherit HTMLElementBuilder<HTMLSpanElement>("span")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type strong() =
        inherit HTMLElementBuilder<HTMLElement>("strong")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type sub() =
        inherit HTMLElementBuilder<HTMLElement>("sub")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type sup() =
        inherit HTMLElementBuilder<HTMLElement>("sup")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type u() =
        inherit HTMLElementBuilder<HTMLElement>("u")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type var() =
        inherit HTMLElementBuilder<HTMLElement>("var")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type wbr() =
        inherit HTMLElementBuilder<HTMLElement>("wbr")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type area() =
        inherit HTMLElementBuilder<HTMLAreaElement>("area")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.alt(value: System.String) = this.AddModifier(fun x -> x.setAttribute("alt", value))
        member this.coords(value: string) = this.AddModifier(fun x -> x.setAttribute("coords", value))
        member this.download(value: System.String) = this.AddModifier(fun x -> x.setAttribute("download", value))
        member this.href(value: System.String) = this.AddModifier(fun x -> x.setAttribute("href", value))
        member this.hreflang(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hreflang", value))
        member this.ping(value: System.String) = this.AddModifier(fun x -> x.setAttribute("ping", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.rel(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rel", value))
        member this.shape(value: System.String) = this.AddModifier(fun x -> x.setAttribute("shape", value))
        member this.target(value: string) = this.AddModifier(fun x -> x.setAttribute("target", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type audio() =
        inherit HTMLElementBuilder<HTMLAudioElement>("audio")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.autoplay(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autoplay", value))
        member this.controls(value: System.String) = this.AddModifier(fun x -> x.setAttribute("controls", value))
        member this.controlslist(value: System.String) = this.AddModifier(fun x -> x.setAttribute("controlslist", value))
        member this.crossorigin(value: string) = this.AddModifier(fun x -> x.setAttribute("crossorigin", value))
        member this.disableremoteplayback(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disableremoteplayback", value))
        member this.loop(value: System.String) = this.AddModifier(fun x -> x.setAttribute("loop", value))
        member this.muted(value: System.String) = this.AddModifier(fun x -> x.setAttribute("muted", value))
        member this.preload(value: string) = this.AddModifier(fun x -> x.setAttribute("preload", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type img() =
        inherit HTMLElementBuilder<HTMLImageElement>("img")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.alt(value: System.String) = this.AddModifier(fun x -> x.setAttribute("alt", value))
        member this.crossorigin(value: string) = this.AddModifier(fun x -> x.setAttribute("crossorigin", value))
        member this.decoding(value: string) = this.AddModifier(fun x -> x.setAttribute("decoding", value))
        member this.fetchpriority(value: string) = this.AddModifier(fun x -> x.setAttribute("fetchpriority", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.ismap(value: System.String) = this.AddModifier(fun x -> x.setAttribute("ismap", value))
        member this.loading(value: string) = this.AddModifier(fun x -> x.setAttribute("loading", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.sizes(value: System.String) = this.AddModifier(fun x -> x.setAttribute("sizes", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.srcset(value: System.String) = this.AddModifier(fun x -> x.setAttribute("srcset", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        member this.usemap(value: System.String) = this.AddModifier(fun x -> x.setAttribute("usemap", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type map() =
        inherit HTMLElementBuilder<HTMLMapElement>("map")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type track() =
        inherit HTMLElementBuilder<HTMLTrackElement>("track")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.default'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("default", value))
        member this.kind(value: string) = this.AddModifier(fun x -> x.setAttribute("kind", value))
        member this.label(value: System.String) = this.AddModifier(fun x -> x.setAttribute("label", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.srclang(value: System.String) = this.AddModifier(fun x -> x.setAttribute("srclang", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type video() =
        inherit HTMLElementBuilder<HTMLVideoElement>("video")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.autoplay(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autoplay", value))
        member this.autopictureinpicture(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autopictureinpicture", value))
        member this.controls(value: System.String) = this.AddModifier(fun x -> x.setAttribute("controls", value))
        member this.controlslist(value: System.String) = this.AddModifier(fun x -> x.setAttribute("controlslist", value))
        member this.crossorigin(value: string) = this.AddModifier(fun x -> x.setAttribute("crossorigin", value))
        member this.disablepictureinpicture(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disablepictureinpicture", value))
        member this.disableremoteplayback(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disableremoteplayback", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.loop(value: System.String) = this.AddModifier(fun x -> x.setAttribute("loop", value))
        member this.muted(value: System.String) = this.AddModifier(fun x -> x.setAttribute("muted", value))
        member this.playsinline(value: System.String) = this.AddModifier(fun x -> x.setAttribute("playsinline", value))
        member this.poster(value: System.String) = this.AddModifier(fun x -> x.setAttribute("poster", value))
        member this.preload(value: string) = this.AddModifier(fun x -> x.setAttribute("preload", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type embed() =
        inherit HTMLElementBuilder<HTMLEmbedElement>("embed")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.type'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type iframe() =
        inherit HTMLElementBuilder<HTMLIFrameElement>("iframe")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.allow(value: System.String) = this.AddModifier(fun x -> x.setAttribute("allow", value))
        member this.allowfullscreen(value: System.String) = this.AddModifier(fun x -> x.setAttribute("allowfullscreen", value))
        member this.allowpaymentrequest(value: System.String) = this.AddModifier(fun x -> x.setAttribute("allowpaymentrequest", value))
        member this.credentialless(value: System.String) = this.AddModifier(fun x -> x.setAttribute("credentialless", value))
        member this.csp(value: System.String) = this.AddModifier(fun x -> x.setAttribute("csp", value))
        member this.fetchpriority(value: string) = this.AddModifier(fun x -> x.setAttribute("fetchpriority", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.loading(value: string) = this.AddModifier(fun x -> x.setAttribute("loading", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.sandbox(value: string) = this.AddModifier(fun x -> x.setAttribute("sandbox", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.srcdoc(value: System.String) = this.AddModifier(fun x -> x.setAttribute("srcdoc", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type object() =
        inherit HTMLElementBuilder<HTMLObjectElement>("object")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.archive(value: System.String) = this.AddModifier(fun x -> x.setAttribute("archive", value))
        member this.border(value: System.String) = this.AddModifier(fun x -> x.setAttribute("border", value))
        member this.classid(value: System.String) = this.AddModifier(fun x -> x.setAttribute("classid", value))
        member this.codebase(value: System.String) = this.AddModifier(fun x -> x.setAttribute("codebase", value))
        member this.codetype(value: System.String) = this.AddModifier(fun x -> x.setAttribute("codetype", value))
        member this.data(value: System.String) = this.AddModifier(fun x -> x.setAttribute("data", value))
        member this.declare(value: System.String) = this.AddModifier(fun x -> x.setAttribute("declare", value))
        member this.form(value: System.String) = this.AddModifier(fun x -> x.setAttribute("form", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.standby(value: System.String) = this.AddModifier(fun x -> x.setAttribute("standby", value))
        member this.type'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.usemap(value: System.String) = this.AddModifier(fun x -> x.setAttribute("usemap", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type source() =
        inherit HTMLElementBuilder<HTMLSourceElement>("source")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.type'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.srcset(value: System.String) = this.AddModifier(fun x -> x.setAttribute("srcset", value))
        member this.sizes(value: System.String) = this.AddModifier(fun x -> x.setAttribute("sizes", value))
        member this.media(value: System.String) = this.AddModifier(fun x -> x.setAttribute("media", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type canvas() =
        inherit HTMLElementBuilder<HTMLCanvasElement>("canvas")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.height(value: System.String) = this.AddModifier(fun x -> x.setAttribute("height", value))
        member this.mozOpaque(value: System.String) = this.AddModifier(fun x -> x.setAttribute("moz-opaque", value))
        member this.width(value: System.String) = this.AddModifier(fun x -> x.setAttribute("width", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type noscript() =
        inherit HTMLElementBuilder<HTMLElement>("noscript")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type script() =
        inherit HTMLElementBuilder<HTMLScriptElement>("script")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.async(value: System.String) = this.AddModifier(fun x -> x.setAttribute("async", value))
        member this.crossorigin(value: System.String) = this.AddModifier(fun x -> x.setAttribute("crossorigin", value))
        member this.defer(value: System.String) = this.AddModifier(fun x -> x.setAttribute("defer", value))
        member this.fetchpriority(value: string) = this.AddModifier(fun x -> x.setAttribute("fetchpriority", value))
        member this.integrity(value: System.String) = this.AddModifier(fun x -> x.setAttribute("integrity", value))
        member this.nomodule(value: System.String) = this.AddModifier(fun x -> x.setAttribute("nomodule", value))
        member this.nonce(value: System.String) = this.AddModifier(fun x -> x.setAttribute("nonce", value))
        member this.referrerpolicy(value: string) = this.AddModifier(fun x -> x.setAttribute("referrerpolicy", value))
        member this.src(value: System.String) = this.AddModifier(fun x -> x.setAttribute("src", value))
        member this.type'(value: string) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.blocking(value: string) = this.AddModifier(fun x -> x.setAttribute("blocking", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type del() =
        inherit HTMLElementBuilder<HTMLModElement>("del")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.cite(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cite", value))
        member this.datetime(value: System.String) = this.AddModifier(fun x -> x.setAttribute("datetime", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type ins() =
        inherit HTMLElementBuilder<HTMLModElement>("ins")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.cite(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cite", value))
        member this.datetime(value: System.String) = this.AddModifier(fun x -> x.setAttribute("datetime", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type caption() =
        inherit HTMLElementBuilder<HTMLTableCaptionElement>("caption")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type col() =
        inherit HTMLElementBuilder<HTMLTableColElement>("col")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.span(value: System.String) = this.AddModifier(fun x -> x.setAttribute("span", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type colgroup() =
        inherit HTMLElementBuilder<HTMLTableColElement>("colgroup")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.span(value: System.String) = this.AddModifier(fun x -> x.setAttribute("span", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type table() =
        inherit HTMLElementBuilder<HTMLTableElement>("table")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type tbody() =
        inherit HTMLElementBuilder<HTMLTableSectionElement>("tbody")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type td() =
        inherit HTMLElementBuilder<HTMLTableCellElement>("td")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.colspan(value: System.String) = this.AddModifier(fun x -> x.setAttribute("colspan", value))
        member this.headers(value: System.String) = this.AddModifier(fun x -> x.setAttribute("headers", value))
        member this.rowspan(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rowspan", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type tfoot() =
        inherit HTMLElementBuilder<HTMLTableSectionElement>("tfoot")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type th() =
        inherit HTMLElementBuilder<HTMLTableCellElement>("th")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.abbr(value: System.String) = this.AddModifier(fun x -> x.setAttribute("abbr", value))
        member this.colspan(value: System.String) = this.AddModifier(fun x -> x.setAttribute("colspan", value))
        member this.headers(value: System.String) = this.AddModifier(fun x -> x.setAttribute("headers", value))
        member this.rowspan(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rowspan", value))
        member this.scope(value: string) = this.AddModifier(fun x -> x.setAttribute("scope", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type thead() =
        inherit HTMLElementBuilder<HTMLTableSectionElement>("thead")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type tr() =
        inherit HTMLElementBuilder<HTMLTableRowElement>("tr")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type button() =
        inherit HTMLElementBuilder<HTMLButtonElement>("button")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.autocomplete(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autocomplete", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.form(value: System.String) = this.AddModifier(fun x -> x.setAttribute("form", value))
        member this.formaction(value: System.String) = this.AddModifier(fun x -> x.setAttribute("formaction", value))
        member this.formenctype(value: string) = this.AddModifier(fun x -> x.setAttribute("formenctype", value))
        member this.formmethod(value: string) = this.AddModifier(fun x -> x.setAttribute("formmethod", value))
        member this.formnovalidate(value: System.String) = this.AddModifier(fun x -> x.setAttribute("formnovalidate", value))
        member this.formtarget(value: string) = this.AddModifier(fun x -> x.setAttribute("formtarget", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.type'(value: string) = this.AddModifier(fun x -> x.setAttribute("type", value))
        member this.value(value: System.String) = this.AddModifier(fun x -> x.setAttribute("value", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type datalist() =
        inherit HTMLElementBuilder<HTMLDataListElement>("datalist")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type fieldset() =
        inherit HTMLElementBuilder<HTMLFieldSetElement>("fieldset")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.form(value: System.String) = this.AddModifier(fun x -> x.setAttribute("form", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type form() =
        inherit HTMLElementBuilder<HTMLFormElement>("form")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.accept(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accept", value))
        member this.acceptCharset(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accept-charset", value))
        member this.autocomplete(value: string) = this.AddModifier(fun x -> x.setAttribute("autocomplete", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.rel(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rel", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type input() =
        inherit HTMLElementBuilder<HTMLInputElement>("input")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type label() =
        inherit HTMLElementBuilder<HTMLLabelElement>("label")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.for'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("for", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type legend() =
        inherit HTMLElementBuilder<HTMLLegendElement>("legend")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type optgroup() =
        inherit HTMLElementBuilder<HTMLOptGroupElement>("optgroup")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.label(value: System.String) = this.AddModifier(fun x -> x.setAttribute("label", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type option() =
        inherit HTMLElementBuilder<HTMLOptionElement>("option")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.label(value: System.String) = this.AddModifier(fun x -> x.setAttribute("label", value))
        member this.selected(value: System.String) = this.AddModifier(fun x -> x.setAttribute("selected", value))
        member this.value(value: System.String) = this.AddModifier(fun x -> x.setAttribute("value", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type progress() =
        inherit HTMLElementBuilder<HTMLProgressElement>("progress")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.max(value: System.String) = this.AddModifier(fun x -> x.setAttribute("max", value))
        member this.value(value: System.String) = this.AddModifier(fun x -> x.setAttribute("value", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type select() =
        inherit HTMLElementBuilder<HTMLSelectElement>("select")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.autocomplete(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autocomplete", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.form(value: System.String) = this.AddModifier(fun x -> x.setAttribute("form", value))
        member this.multiple(value: System.String) = this.AddModifier(fun x -> x.setAttribute("multiple", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.required(value: System.String) = this.AddModifier(fun x -> x.setAttribute("required", value))
        member this.size(value: System.String) = this.AddModifier(fun x -> x.setAttribute("size", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type textarea() =
        inherit HTMLElementBuilder<HTMLTextAreaElement>("textarea")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        member this.autocomplete(value: string) = this.AddModifier(fun x -> x.setAttribute("autocomplete", value))
        member this.autocorrect(value: string) = this.AddModifier(fun x -> x.setAttribute("autocorrect", value))
        member this.cols(value: System.String) = this.AddModifier(fun x -> x.setAttribute("cols", value))
        member this.disabled(value: System.String) = this.AddModifier(fun x -> x.setAttribute("disabled", value))
        member this.form(value: System.String) = this.AddModifier(fun x -> x.setAttribute("form", value))
        member this.maxlength(value: System.String) = this.AddModifier(fun x -> x.setAttribute("maxlength", value))
        member this.minlength(value: System.String) = this.AddModifier(fun x -> x.setAttribute("minlength", value))
        member this.name(value: System.String) = this.AddModifier(fun x -> x.setAttribute("name", value))
        member this.placeholder(value: System.String) = this.AddModifier(fun x -> x.setAttribute("placeholder", value))
        member this.readonly(value: System.String) = this.AddModifier(fun x -> x.setAttribute("readonly", value))
        member this.required(value: System.String) = this.AddModifier(fun x -> x.setAttribute("required", value))
        member this.rows(value: System.String) = this.AddModifier(fun x -> x.setAttribute("rows", value))
        member this.spellcheck(value: string) = this.AddModifier(fun x -> x.setAttribute("spellcheck", value))
        member this.wrap(value: string) = this.AddModifier(fun x -> x.setAttribute("wrap", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    
    type summary() =
        inherit HTMLElementBuilder<HTMLElement>("summary")
        member this.accesskey(value: System.String) = this.AddModifier(fun x -> x.setAttribute("accesskey", value))
        member this.autocapitalize(value: string) = this.AddModifier(fun x -> x.setAttribute("autocapitalize", value))
        member this.autofocus(value: System.String) = this.AddModifier(fun x -> x.setAttribute("autofocus", value))
        member this.class'(value: System.String) = this.AddModifier(fun x -> x.setAttribute("class", value))
        member this.contenteditable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("contenteditable", value.ToString()))
        member this.contextmenu(value: System.String) = this.AddModifier(fun x -> x.setAttribute("contextmenu", value))
        member this.dir(value: string) = this.AddModifier(fun x -> x.setAttribute("dir", value))
        member this.draggable(value: System.Boolean) = this.AddModifier(fun x -> x.setAttribute("draggable", value.ToString()))
        member this.enterkeyhint(value: System.String) = this.AddModifier(fun x -> x.setAttribute("enterkeyhint", value))
        member this.exportparts(value: System.String) = this.AddModifier(fun x -> x.setAttribute("exportparts", value))
        member this.hidden(value: System.String) = this.AddModifier(fun x -> x.setAttribute("hidden", value))
        member this.id(value: System.String) = this.AddModifier(fun x -> x.setAttribute("id", value))
        member this.inert(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inert", value))
        member this.inputmode(value: System.String) = this.AddModifier(fun x -> x.setAttribute("inputmode", value))
        member this.is(value: System.String) = this.AddModifier(fun x -> x.setAttribute("is", value))
        
        member this.onclick(handler) = this.AddInitOnlyModifier(fun x -> x.onclick <- handler)
        
    

type Html =
    static member inline nothing = HtmlBase.nothing ()
    static member inline text text = HtmlBase.text text
    // ---
    static member inline html = HtmlElementBuilders.html()
    static member inline head = HtmlElementBuilders.head()
    static member inline link = HtmlElementBuilders.link()
    static member inline meta = HtmlElementBuilders.meta()
    static member inline style = HtmlElementBuilders.style()
    static member inline title = HtmlElementBuilders.title()
    static member inline body = HtmlElementBuilders.body()
    static member inline address = HtmlElementBuilders.address()
    static member inline article = HtmlElementBuilders.article()
    static member inline aside = HtmlElementBuilders.aside()
    static member inline footer = HtmlElementBuilders.footer()
    static member inline header = HtmlElementBuilders.header()
    static member inline h1 = HtmlElementBuilders.h1()
    static member inline h2 = HtmlElementBuilders.h2()
    static member inline h3 = HtmlElementBuilders.h3()
    static member inline h4 = HtmlElementBuilders.h4()
    static member inline h5 = HtmlElementBuilders.h5()
    static member inline h6 = HtmlElementBuilders.h6()
    static member inline main = HtmlElementBuilders.main()
    static member inline nav = HtmlElementBuilders.nav()
    static member inline section = HtmlElementBuilders.section()
    static member inline blockquote = HtmlElementBuilders.blockquote()
    static member inline dd = HtmlElementBuilders.dd()
    static member inline div = HtmlElementBuilders.div()
    static member inline dl = HtmlElementBuilders.dl()
    static member inline dt = HtmlElementBuilders.dt()
    static member inline figcaption = HtmlElementBuilders.figcaption()
    static member inline figure = HtmlElementBuilders.figure()
    static member inline hr = HtmlElementBuilders.hr()
    static member inline li = HtmlElementBuilders.li()
    static member inline menu = HtmlElementBuilders.menu()
    static member inline ol = HtmlElementBuilders.ol()
    static member inline p = HtmlElementBuilders.p()
    static member inline pre = HtmlElementBuilders.pre()
    static member inline ul = HtmlElementBuilders.ul()
    static member inline a = HtmlElementBuilders.a()
    static member inline abbr = HtmlElementBuilders.abbr()
    static member inline b = HtmlElementBuilders.b()
    static member inline bdi = HtmlElementBuilders.bdi()
    static member inline bdo = HtmlElementBuilders.bdo()
    static member inline br = HtmlElementBuilders.br()
    static member inline cite = HtmlElementBuilders.cite()
    static member inline code = HtmlElementBuilders.code()
    static member inline dfn = HtmlElementBuilders.dfn()
    static member inline em = HtmlElementBuilders.em()
    static member inline i = HtmlElementBuilders.i()
    static member inline kbd = HtmlElementBuilders.kbd()
    static member inline mark = HtmlElementBuilders.mark()
    static member inline q = HtmlElementBuilders.q()
    static member inline rp = HtmlElementBuilders.rp()
    static member inline rt = HtmlElementBuilders.rt()
    static member inline ruby = HtmlElementBuilders.ruby()
    static member inline s = HtmlElementBuilders.s()
    static member inline samp = HtmlElementBuilders.samp()
    static member inline small = HtmlElementBuilders.small()
    static member inline span = HtmlElementBuilders.span()
    static member inline strong = HtmlElementBuilders.strong()
    static member inline sub = HtmlElementBuilders.sub()
    static member inline sup = HtmlElementBuilders.sup()
    static member inline u = HtmlElementBuilders.u()
    static member inline var = HtmlElementBuilders.var()
    static member inline wbr = HtmlElementBuilders.wbr()
    static member inline area = HtmlElementBuilders.area()
    static member inline audio = HtmlElementBuilders.audio()
    static member inline img = HtmlElementBuilders.img()
    static member inline map = HtmlElementBuilders.map()
    static member inline track = HtmlElementBuilders.track()
    static member inline video = HtmlElementBuilders.video()
    static member inline embed = HtmlElementBuilders.embed()
    static member inline iframe = HtmlElementBuilders.iframe()
    static member inline object = HtmlElementBuilders.object()
    static member inline source = HtmlElementBuilders.source()
    static member inline canvas = HtmlElementBuilders.canvas()
    static member inline noscript = HtmlElementBuilders.noscript()
    static member inline script = HtmlElementBuilders.script()
    static member inline del = HtmlElementBuilders.del()
    static member inline ins = HtmlElementBuilders.ins()
    static member inline caption = HtmlElementBuilders.caption()
    static member inline col = HtmlElementBuilders.col()
    static member inline colgroup = HtmlElementBuilders.colgroup()
    static member inline table = HtmlElementBuilders.table()
    static member inline tbody = HtmlElementBuilders.tbody()
    static member inline td = HtmlElementBuilders.td()
    static member inline tfoot = HtmlElementBuilders.tfoot()
    static member inline th = HtmlElementBuilders.th()
    static member inline thead = HtmlElementBuilders.thead()
    static member inline tr = HtmlElementBuilders.tr()
    static member inline button = HtmlElementBuilders.button()
    static member inline datalist = HtmlElementBuilders.datalist()
    static member inline fieldset = HtmlElementBuilders.fieldset()
    static member inline form = HtmlElementBuilders.form()
    static member inline input = HtmlElementBuilders.input()
    static member inline label = HtmlElementBuilders.label()
    static member inline legend = HtmlElementBuilders.legend()
    static member inline optgroup = HtmlElementBuilders.optgroup()
    static member inline option = HtmlElementBuilders.option()
    static member inline progress = HtmlElementBuilders.progress()
    static member inline select = HtmlElementBuilders.select()
    static member inline textarea = HtmlElementBuilders.textarea()
    static member inline summary = HtmlElementBuilders.summary()
    
